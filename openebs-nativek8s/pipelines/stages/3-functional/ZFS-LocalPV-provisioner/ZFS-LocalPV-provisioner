#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port -o LogLevel=ERROR 'cd e2e-nativek8s && bash openebs-nativek8s/pipelines/stages/3-functional/ZFS-LocalPV-provisioner/ZFS-LocalPV-provisioner run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$ZFS_BRANCH'"' '"'$ZFS_DRIVER_IMAGE'"'

}

#######################################
#    Deploy ZFS LocalPV provisioner   #
#######################################

run_job() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
zfs_branch=$(echo $4)
zfs_driver_image=$(echo $5)
releaseTag=$(echo $5 | cut -d ":" -f 2)
echo "releaseTag=$releaseTag"

source ~/.profile

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j1-zfspv-provisioner jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:zfs-ctrl-high-availability jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:zfspv-custom-topology jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:zfspv-raw-block-volume jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j2-zfspv-snapshot-clone jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j3-snap-clone-ext4 jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j4-snap-clone-xfs jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j5-zfs-vol-resize jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j6-zfs-vol-resize-ext4 jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j7-zfs-vol-resize-xfs jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j8-zv-property-modify jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j9-zv-property-modify-ext4 jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j10-zv-property-modify-xfs jobphase:Waiting
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j1-zfspv-provisioner jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the litmusbook for deploying ZFS LocalPV provisioner
test_name=$(bash openebs-nativek8s/utils/generate_test_name testcase=zfspv-provisioner metadata="")
echo $test_name

# copy the content of provisioner run_litmus_test.yml into a temporary file to update the test specific parameters.
cd e2e-tests
cp providers/zfs-localpv-provisioner/run_litmus_test.yml zfs_pv_provisioner.yml

# Modify test specific values in runner file using sed command
sed -i -e '/name: STORAGE_CLASS/{n;s/.*/            value: zfs-sc/g}' \
-e "/name: ZFS_BRANCH/{n;s/.*/            value: ${zfs_branch}/g}" \
-e "/name: ZFS_DRIVER_IMAGE/{n;s/.*/            value: ${zfs_driver_image}/g}" \
-e '/name: OS_NAME/{n;s/.*/            value: ubuntu/g}' \
-e '/name: ZPOOL_CREATION/{n;s/.*/            value: "true"/g}' \
-e '/name: POOL_NAME/{n;s/.*/            value: zfs-test-pool/g}' \
-e '/name: POOL_TYPE/{n;s/.*/            value: striped/g}' \
-e '/name: ACTION/{n;s/.*/            value: provision/g}' \
-e '/name: COMPRESSION/{n;s/.*/            value: "off"/g}' \
-e '/name: DEDUP/{n;s/.*/            value: "off"/g}' \
-e '/name: SNAPSHOT_CLASS/{n;s/.*/            value: zfs-snapshot-class/g}' \
-e '/name: VOLBLOCKSIZE/{n;s/.*/            value: 4k/g}' \
-e '/name: RECORDSIZE/{n;s/.*/            value: 4k/g}' zfs_pv_provisioner.yml

cat zfs_pv_provisioner.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-nativek8s/utils/litmus_job_runner label='name:openebs-zfspv-provision' job=zfs_pv_provisioner.yml
## Get the cluster state Once the litmus jobs completed.
bash ../openebs-nativek8s/utils/dump_cluster_state;
cd ..
## Update the e2e event for the job.
bash openebs-nativek8s/utils/event_updater jobname:s3-j1-zfspv-provisioner $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#################
## GET RESULT  ##
#################

rc_val=$(echo $?)

source ~/.profile
testResult=$(kubectl get litmusresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j1-zfspv-provisioner jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "run_job" ];then
  run_job $2 $3 $4 $5 $6
else
  connect_cluster
fi

