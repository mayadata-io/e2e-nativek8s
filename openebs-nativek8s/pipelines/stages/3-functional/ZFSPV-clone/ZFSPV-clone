#!/bin/bash

## Define and initialize test-result specific variables.
zfspv_clone_rc_val=1
zfspv_clone_deprovision_rc_val=1
zfspv_snapshot_deprovision_rc_val=1

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$ip -p $port -o LogLevel=ERROR 'cd e2e-nativek8s && bash openebs-nativek8s/pipelines/stages/3-functional/ZFSPV-clone/ZFSPV-clone run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"'

}

######################
# create zfspv-clone #
######################

zfspv_clone() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
source ~/.profile

time="date"
current_time=$(eval $time)

## Pooling over the previous job to wait for its completion
bash openebs-nativek8s/utils/pooling jobname:s3-j3-zfspv-snapshot
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j4-zfspv-clone jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name to run litmusbook for creating zfspv-clone
test_name=$(bash openebs-nativek8s/utils/generate_test_name testcase=zfspv-clone metadata="")
echo $test_name
cd e2e-tests

# copy the content of run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfs-LocalPV/zfspv-clone/run_litmus_test.yml zfs_clone_test.yml

# Modify test specific values in runner file using sed command
sed -i -e '/name: APP_NAMESPACE/{n;s/.*/            value: percona-zfs-snap/}' \
-e '/name: OPERATOR_NAMESPACE/{n;s/.*/            value: openebs/}' \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfs-sc-zfs/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: CLONED_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: CLONE_PVC_SIZE/{n;s/.*/            value: 5Gi/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: percona-clone/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_clone_test.yml

cat zfs_clone_test.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-nativek8s/utils/litmus_job_runner label='name:zfspv-clone' job=zfs_clone_test.yml
## Get the cluster state Once the litmus jobs completed.
bash ../openebs-nativek8s/utils/dump_cluster_state;
cd ..
## Update the e2e event for the job.
bash openebs-nativek8s/utils/event_updater jobname:s3-j4-zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_rc_val=$(echo $?)

if [ "$zfspv_clone_rc_val" != "0" ]; then
zfspv_snapshot_deprovision
app_deprovision
fi

}

###########################
# Deprovision zfspv-clone #
###########################

zfspv_clone_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv clone
run_id="deprovision";test_name=$(bash openebs-nativek8s/utils/generate_test_name testcase=zfspv-clone metadata=${run_id})
echo $test_name
cd e2e-tests

# copy the content of run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfs-LocalPV/zfspv-clone/run_litmus_test.yml zfs_clone_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-clone-/generateName: zfspv-clone-deprovision-/g' \
-e '/labels:/{n;s/  name: zfspv-clone/  name: zfspv-clone-deprovision/g}' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: percona-zfs-snap/}' \
-e '/name: OPERATOR_NAMESPACE/{n;s/.*/            value: openebs/}' \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfs-sc-zfs/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: CLONED_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: CLONE_PVC_SIZE/{n;s/.*/            value: 5Gi/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: percona-clone/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_clone_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_clone_deprovision.yml

cat zfs_clone_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-nativek8s/utils/litmus_job_runner label='name:zfspv-clone-deprovision' job=zfs_clone_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../openebs-nativek8s/utils/dump_cluster_state;
cd ..
## Update the e2e event for the job.
bash openebs-nativek8s/utils/event_updater jobname:s3-j4-zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_deprovision_rc_val=$(echo $?)

if [ "$zfspv_clone_deprovision_rc_val" != "0" ]; then
zfspv_snapshot_deprovision
app_deprovision
fi

}

##############################
# Deprovision zfspv-snapshot #
##############################

zfspv_snapshot_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv-snapshot
run_id="deprovision";test_name=$(bash openebs-nativek8s/utils/generate_test_name testcase=zfspv-snapshot metadata=${run_id})
echo $test_name
cd e2e-tests

# copy the content of provisioner run_litmus_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfs-LocalPV/zfspv-snapshot/run_litmus_test.yml zfs_snap_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-snapshot-/generateName: zfspv-snapshot-deprovision-/g' \
-e '/labels:/{n;s/  name: zfspv-snapshot/  name: zfspv-snapshot-deprovision/g}' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: percona-zfs-snap/}' \
-e '/name: OPERATOR_NAMESPACE/{n;s/.*/            value: openebs/}' \
-e '/name: SNAPSHOT_CLASS/{n;s/.*/            value: zfs-snapshot-class/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-mysql-claim/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: name=percona/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_snap_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_snap_deprovision.yml

cat zfs_snap_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-nativek8s/utils/litmus_job_runner label='name:zfspv-snapshot-deprovision' job=zfs_snap_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../openebs-nativek8s/utils/dump_cluster_state;
cd ..
## Update the e2e event for the job.
bash openebs-nativek8s/utils/event_updater jobname:s3-j4-zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_snapshot_deprovision_rc_val=$(echo $?)

if [ "$zfspv_snapshot_deprovision_rc_val" != "0" ]; then
app_deprovision
fi

}

##########################
# Deprovision Application#
##########################

app_deprovision() {
  
## Generate test name to run litmusbook for deprovisioning the percona application
run_id="snap-deprovision";test_name=$(bash openebs-nativek8s/utils/generate_test_name testcase=percona-deployment metadata=${run_id})
echo $test_name
cd e2e-tests

# copy the content of run_litmus_test.yml into a different file to update the test specific parameters.
cp apps/percona/deployers/run_litmus_test.yml percona_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/app: percona-deployment/app: deprovision-percona-zfs-snap/g' \
-e 's/generateName: litmus-percona-/generateName: litmus-percona-zfssnap-deprovision-/g' \
-e 's/value: openebs-standard/value: zfs-sc-zfs/g' \
-e 's/value: provision/value: deprovision/g' \
-e '/name: TARGET_AFFINITY_CHECK/{n;s/value: enable/value: disable/g}' \
-e 's/value: app-percona-ns/value: percona-zfs-snap/g' percona_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' percona_deprovision.yml

cat percona_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../openebs-nativek8s/utils/litmus_job_runner label='app:deprovision-percona-zfs-snap' job=percona_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../openebs-nativek8s/utils/dump_cluster_state;
cd ..
## Update the e2e event for the job.
bash openebs-nativek8s/utils/event_updater jobname:s3-j4-zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deprovision_rc_val=$(echo $?)

if [ "$app_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_snapshot_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j4-zfspv-clone jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

else
## Update the e2e-result-custom-resources for the job
bash openebs-nativek8s/utils/e2e-cr jobname:s3-j4-zfspv-clone jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
exit 1;
fi

}


if [ "$1" == "run_job" ];then
  zfspv_clone $2 $3 $4 $5
  zfspv_clone_deprovision
  zfspv_snapshot_deprovision
  app_deprovision
else
  connect_cluster
fi