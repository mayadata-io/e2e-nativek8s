#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $lvm_user@$ip -p $port -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/2-provisioner/2P01-lvm-localpv-provisioner run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$LVM_BRANCH'"' '"'$LVM_DRIVER_IMAGE'"' '"'$PHYSICAL_VOLUME_DISKS'"' '"'$LVM_OPERATOR_NAMESPACE'"'

}

#######################################
#    Deploy LVM LocalPV provisioner   #
#######################################

run_job() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
lvm_branch=$(echo $4)
lvm_driver_image=$(echo $5)
pv_disks=$(echo $6)
lvm_operator_ns=$(echo $7)
releaseTag=$(echo $5 | cut -d ":" -f 2)
echo "releaseTag=$releaseTag"

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/lvm-e2e-cr jobname:lvm-localpv-provisioner jobphase:Waiting
bash pipeline/utils/lvm-e2e-cr jobname:lvm-ctrl-high-availability jobphase:Waiting
bash pipeline/utils/lvm-e2e-cr jobname:lvm-localpv-provisioner jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the e2e-test for deploying LVM LocalPV provisioner
test_name=$(bash pipeline/utils/generate_test_name testcase=lvm-localpv-provisioner metadata="")
echo $test_name

# copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd lvm-localpv/e2e-tests
cp experiments/lvm-localpv-provisioner/run_e2e_test.yml lvmpv_provisioner.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: LVM_BRANCH/{n;s/value: master/value: ${lvm_branch}/g}" \
-e "/name: LVM_DRIVER_IMAGE/{n;s/.*/            value: ${lvm_driver_image}/g}" \
-e "/name: OPERATOR_NAMESPACE/{n;s/.*/            value: ${lvm_operator_ns}/g}" \
-e '/name: VOLUME_GROUP_CREATION/{n;s/.*/            value: "true"/g}' \
-e "/name: PHYSICAL_VOLUME_DISKS/{n;s/.*/            value: ${pv_disks}/g}" \
-e "/name: NODE_NAMES/{n;s/.*/            value: lvm-master,lvm-node1,lvm-node2,lvm-node3/g}" \
-e '/name: STORAGE_CLASS_CREATION/{n;s/.*/            value: "true"/g}' lvmpv_provisioner.yml

cat lvmpv_provisioner.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:lvm-localpv' job=lvmpv_provisioner.yml
## Get the cluster state once the e2e-test job completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:lvm-localpv-provisioner $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#################
## GET RESULT  ##
#################

rc_val=$(echo $?)

testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash pipeline/utils/lvm-e2e-cr jobname:lvm-localpv-provisioner jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "run_job" ];then
  run_job $2 $3 $4 $5 $6 $7 $8
else
  connect_cluster
fi