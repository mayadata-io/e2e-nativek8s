#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $device_user@$device_ip -p $device_port -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/2-provisioner/device-localpv-provisioner run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$DEVICE_BRANCH'"' '"'$DEVICE_DRIVER_IMAGE'"' '"'$PHYSICAL_DEVICE_DISKS'"' '"'$DEVICE_OPERATOR_NAMESPACE'"' '"'$META_PARTITION_CREATION'"' '"'$META_DEVICE_NAME'"' '"'$DEVICE_LOCALPV_NODES'"'

}

#######################################
#    Deploy device LocalPV provisioner   #
#######################################

run_job() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
device_branch=$(echo $4)
device_driver_image=$(echo $5)
pv_disks=$(echo $6)
device_operator_ns=$(echo $7)
meta_partition_creation=$(echo $8)
meta_device_name=$(echo $9)
device_localpv_nodes=$(echo ${10})
releaseTag=$(echo $5 | cut -d ":" -f 2)
echo "releaseTag=$releaseTag"

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/device-e2e-cr jobname:device-localpv-provisioner jobphase:Waiting
bash pipeline/utils/device-e2e-cr jobname:device-ctrl-high-availability jobphase:Waiting
bash pipeline/utils/device-e2e-cr jobname:device-localpv-provisioner jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the e2e-test for deploying device LocalPV provisioner
test_name=$(bash pipeline/utils/generate_test_name testcase=device-localpv-provisioner metadata="")
echo $test_name

# copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd device-localpv/e2e-tests
cp experiments/device-localpv-provisioner/run_e2e_test.yml devicepv_provisioner.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: DEVICE_BRANCH/{n;s/value: 'master'/value: ${device_branch}/g}" \
-e "/name: DEVICE_DRIVER_IMAGE/{n;s/.*/            value: ${device_driver_image}/g}" \
-e "/name: DEVICE_OPERATOR_NAMESPACE/{n;s/value: 'openebs'/value: ${device_operator_ns}/g}" \
-e "/name: META_PARTITION_CREATION/{n;s/.*/            value: '${meta_partition_creation}'/g}" \
-e "/name: PHYSICAL_DISK/{n;s/.*/            value: ${pv_disks}/g}" \
-e "/name: DEVICE_NAME/{n;s/value: 'e2e-test-device'/value: ${meta_device_name}/g}" \
-e "/name: NODE_NAMES/{n;s/.*/            value: ${device_localpv_nodes}/g}" \
-e "/name: STORAGE_CLASS_CREATION/{n;s/.*/            value: 'true'/g}" devicepv_provisioner.yml

cat devicepv_provisioner.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:device-localpv-provisioner' job=devicepv_provisioner.yml
## Get the cluster state once the e2e-test job completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:device-localpv-provisioner $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#################
## GET RESULT  ##
#################

rc_val=$(echo $?)

testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash pipeline/utils/device-e2e-cr jobname:device-localpv-provisioner jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "run_job" ];then
  run_job $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11}
else
  connect_cluster
fi
