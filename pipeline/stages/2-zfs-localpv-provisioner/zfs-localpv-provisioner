#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/2-zfs-localpv-provisioner/zfs-localpv-provisioner run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$ZFS_BRANCH'"' '"'$ZFS_DRIVER_IMAGE'"' '"'$ZPOOL_CREATION'"' '"'$ZFS_OPERATOR_NAMESPACE'"' '"'$ZPOOL_ENCRYPTION'"' '"'$ZPOOL_TYPE'"' '"'$ZPOOL_DISKS'"' '"'$ZPOOL_NODE_NAMES'"'

}

#######################################
#    Deploy ZFS LocalPV provisioner   #
#######################################

run_job() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
zfs_branch=$(echo $4)
zfs_driver_image=$(echo $5)
zpool_creation=$(echo $6)
zfs_operator_namespace=$(echo $7)
zpool_encryption=$(echo $8)
zpool_type=$(echo $9)
zpool_disks=$(echo ${10})
zpool_node_names=$(echo ${11})

releaseTag=$(echo $5 | cut -d ":" -f 2)
echo "releaseTag=$releaseTag"

source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/zfs-e2e-cr jobname:zfs-localpv-provisioner jobphase:Waiting
bash pipeline/utils/zfs-e2e-cr jobname:zfs-ctrl-high-availability jobphase:Waiting
bash pipeline/utils/zfs-e2e-cr jobname:zfs-localpv-provisioner jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the litmusbook for deploying ZFS LocalPV provisioner
test_name=$(bash pipeline/utils/generate_test_name testcase=zfs-localpv-provisioner metadata="")
echo $test_name

# copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp experiments/zfs-localpv-provisioner/run_e2e_test.yml zfs_pv_provisioner.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: ZFS_BRANCH/{n;s/value: 'develop'/value: ${zfs_branch}/g}" \
-e "/name: ZFS_DRIVER_IMAGE/{n;s/.*/            value: ${zfs_driver_image}/g}" \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/value: 'openebs'/value: ${zfs_operator_namespace}/g}" \
-e "/name: ZPOOL_CREATION/{n;s/.*/            value: '${zpool_creation}'/g}" \
-e "/name: ZPOOL_ENCRYPTION/{n;s/value: 'off'/value: '${zpool_encryption}'/g}" \
-e "/name: ZPOOL_TYPE/{n;s/value: 'stripe'/value: ${zpool_type}/g}" \
-e "/name: ZPOOL_DISKS/{n;s/.*/            value: ${zpool_disks}/g}" \
-e "/name: ZPOOL_NODE_NAMES/{n;s/.*/            value: ${zpool_node_names}/g}" zfs_pv_provisioner.yml

cat zfs_pv_provisioner.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfs-localpv-provisioner' job=zfs_pv_provisioner.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-localpv-provisioner $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

#################
## GET RESULT  ##
#################

rc_val=$(echo $?)

source ~/.profile
testResult=$(kubectl get e2eresult ${test_name} --no-headers -o custom-columns=:spec.testStatus.result)

current_time=$(eval $time)
bash pipeline/utils/zfs-e2e-cr jobname:zfs-localpv-provisioner jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:$testResult

if [ "$rc_val" != "0" ]; then
exit 1;
fi
}

if [ "$1" == "run_job" ];then
  run_job $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11} ${12}
else
  connect_cluster
fi
