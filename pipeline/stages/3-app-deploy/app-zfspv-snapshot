#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/3-app-deploy/app-zfspv-snapshot run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$ZFS_OPERATOR_NAMESPACE'"'

}

#######################################
# Deploy percona application on ZFSPV #
#######################################

app_deploy() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
zfs_operator_namespace=$(echo $4)
source ~/.profile

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/zfs-e2e-cr jobname:app-zfspv-snapshot jobphase:Waiting
bash pipeline/utils/zfs-e2e-cr jobname:app-zfspv-snapshot jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the litmusbook for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-provision-zfs-snap metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of deployers run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/percona/deployers/run_e2e_test.yml deploy_percona_zfssnap.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-snap'/g}" \
-e 's/generateName: percona-deploy-/generateName: percona-provision-zfs-snap-/g' \
-e 's/app: percona-deployment/app: percona-deployment-zfs-snap/g' deploy_percona_zfssnap.yml

cat deploy_percona_zfssnap.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deployment-zfs-snap' job=deploy_percona_zfssnap.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:app-zfspv-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deploy_rc_val=$(echo $?)
if [ "$app_deploy_rc_val" != "0" ]; then
exit 1;
fi

}

###################################
# Loadgen on Percona application  #
###################################

app_loadgen() {

## Generate test name for running litmusbook for generate load on application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-loadgen-zfs-snap metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of workload run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/percona/workload/run_e2e_test.yml loadgen_percona_zfssnap.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/loadgen: percona-loadjob/loadgen: percona-loadjob-zfs-snap/g' \
-e 's/generateName: percona-loadgen-/generateName: percona-loadgen-zfs-snap-/g' \
-e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-snap'/g}" loadgen_percona_zfssnap.yml

cat loadgen_percona_zfssnap.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='loadgen:percona-loadjob-zfs-snap' job=loadgen_percona_zfssnap.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:app-zfspv-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_loadgen_rc_val=$(echo $?)
if [ "$app_loadgen_rc_val" != "0" ]; then
exit 1;
fi

}

#########################
# Create zfspv-snapshot #
#########################

zfspv_snapshot() { 
  
## Generate test name for running litmusbook for creating zfspv snapshot
test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-snapshot metadata="")
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-snapshot/run_e2e_test.yml zfs_snap_test.yml

# Modify test specific values in runner file using sed command
sed -i -e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: SNAPSHOT_CLASS/{n;s/.*/            value: zfs-snapshot-class/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_snap_test.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: zfs_snap
' zfs_snap_test.yml

cat zfs_snap_test.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfspv-snapshot' job=zfs_snap_test.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:app-zfspv-snapshot $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_snapshot_rc_val=$(echo $?)
if [ "$zfspv_snapshot_rc_val" != "0" ]; then
exit 1;
fi

if [ "$zfspv_snapshot_rc_val" -eq "0" ] &&
   [ "$app_loadgen_rc_val" -eq "0" ] &&
   [ "$app_deploy_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:app-zfspv-snapshot jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

fi

}

if [ "$1" == "run_job" ];then
  app_deploy $2 $3 $4 $5
  app_loadgen
  zfspv_snapshot
else
  connect_cluster
fi