#!/bin/bash

## Define and initialize test-result specific variables.
app_deploy_rc_val=1
app_loadgen_rc_val=1
xfs_backup_same_ns_rc_val=1
xfs_restore_same_ns_rc_val=1
restore_app_deprovision_rc_val=1

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
sshpass -p $pass ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/3-functional/3F23-xfs-backup-restore-same-ns run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$VELERO_PLUGIN_NAME'"' '"'$VELERO_VERSION'"'

}

#######################################
# Deploy percona application on ZFSPV #
#######################################

app_deploy() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
velero_plugin=$(echo $4)
velero_version=$(echo $5)
source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

## Pooling over the previous job to wait for its completion
bash pipeline/utils/pooling jobname:zfs-backup-restore-diff-ns
bash pipeline/utils/zfs-e2e-cr jobname:xfs-backup-restore-same-ns jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the litmusbook for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-provision-xfs-bkp-same-ns metadata='')
echo $test_name

## copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_xfs_bkp_same_ns.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'xfs-bkp-same-ns'/g}" \
-e 's/generateName: percona-deploy-/generateName: percona-xfs-bkp-restore-same-ns-/g' \
-e "/name: STORAGE_CLASS/{n;s/value: 'zfspv-sc'/value: 'zfspv-sc-xfs'/g}" \
-e 's/app: percona-deployment/app: percona-xfs-bkp-same-ns/g' percona_xfs_bkp_same_ns.yml

cat percona_xfs_bkp_same_ns.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-xfs-bkp-same-ns' job=percona_xfs_bkp_same_ns.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:xfs-backup-restore-same-ns $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deploy_rc_val=$(echo $?)
if [ "$app_deploy_rc_val" != "0" ]; then
exit 1;
fi

}

################
#  App_Loaden  #
################

app_loadgen() {

## Generate test name for running litmusbook for generate load on application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-loadgen-xfs-bkp-same-ns metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of workload run_e2e_test.yml into a sameerent file to update the test specific parameters.
cp apps/percona/workload/run_e2e_test.yml loadgen_xfs_bkp_restore_same_ns.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/loadgen: percona-loadjob/loadgen: percona-loadjob-xfs-bkp-same-ns/g' \
-e 's/generateName: percona-loadgen-/generateName: percona-loadgen-xfs-bkp-same-ns-/g' \
-e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'xfs-bkp-same-ns'/g}" loadgen_xfs_bkp_restore_same_ns.yml

cat loadgen_xfs_bkp_restore_same_ns.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='loadgen:percona-loadjob-xfs-bkp-same-ns' job=loadgen_xfs_bkp_restore_same_ns.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:xfs-backup-restore-same-ns $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_loadgen_rc_val=$(echo $?)
if [ "$app_loadgen_rc_val" != "0" ]; then
exit 1;
fi

}

#########################
#  zfspv-velero-backup  #
#########################

xfs_backup_same_ns() {

## Generate the test name for running the litmusbook for percona deployment
run_id="xfs-bkp-same-ns";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-velero-backup-restore metadata=${run_id})
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp experiments/functional/backup_and_restore/run_e2e_test.yml xfs_backup_same_ns.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-velero-backup-restore-/generateName: xfs-backup-same-ns-/g' \
-e 's/test: velero-backup-restore/test: xfs-bkp-same-ns/g' \
-e 's/name: zfspv-backup-store/name: configmap-xfs-backup-restore-same-ns/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: xfs-bkp-same-ns/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/g}' \
-e '/name: ACTION/{n;s/.*/            value: backup/g}' \
-e '/name: VELERO_BACKUP_NAME/{n;s/.*/            value: xfs-same-ns-backup/g}' \
-e "/name: VELERO_PLUGIN_NAME/{n;s/.*/            value: ${velero_plugin}/g}" \
-e "/name: VELERO_VERSION/{n;s/.*/            value: ${velero_version}/g}" \
-e '/name: STORAGE_BUCKET/{n;s/.*/            value: minio/g}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/g}' xfs_backup_same_ns.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' xfs_backup_same_ns.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: xfs_bkp_same_ns
' xfs_backup_same_ns.yml

cat xfs_backup_same_ns.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:xfs-bkp-same-ns' job=xfs_backup_same_ns.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:xfs-backup-restore-same-ns $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

xfs_backup_same_ns_rc_val=$(echo $?)
if [ "$xfs_backup_same_ns_rc_val" != "0" ]; then
exit 1;
fi

}

############################
#   zfspv-velero-restore   #
############################

xfs_restore_same_ns() {

## Generate the test name for running the litmusbook for percona deployment
run_id="xfs-restore-same-ns";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-velero-backup-restore metadata=${run_id})
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp experiments/functional/backup_and_restore/run_e2e_test.yml xfs_restore_same_ns.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-velero-backup-restore-/generateName: xfs-restore-same-ns-/g' \
-e 's/test: velero-backup-restore/test: xfs-restore-same-ns/g' \
-e 's/name: zfspv-backup-store/name: configmap-xfs-backup-restore-same-ns/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: xfs-bkp-same-ns/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/g}' \
-e '/name: ACTION/{n;s/.*/            value: restore/g}' \
-e '/name: VELERO_BACKUP_NAME/{n;s/.*/            value: xfs-same-ns-backup/g}' \
-e "/name: VELERO_PLUGIN_NAME/{n;s/.*/            value: ${velero_plugin}/g}" \
-e "/name: VELERO_VERSION/{n;s/.*/            value: ${velero_version}/g}" \
-e '/name: STORAGE_BUCKET/{n;s/.*/            value: minio/g}' \
-e '/name: RESTORE_IN_DIFF_NAMESPACE/{n;s/.*/            value: "false"/g}' \
-e '/name: RESTORE_NAMESPACE/{n;s/.*/            value: xfs-restore-same-ns/g}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/g}' xfs_restore_same_ns.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' xfs_restore_same_ns.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: xfs_bkp_same_ns
' xfs_restore_same_ns.yml

cat xfs_backup_same_ns.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:xfs-restore-same-ns' job=xfs_restore_same_ns.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:xfs-backup-restore-same-ns $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

xfs_restore_same_ns_rc_val=$(echo $?)

if [ "$xfs_restore_same_ns_rc_val" != "0" ]; then
exit 1;
fi

}

#######################################
# Deprovision percona application     #
#######################################

app_deprovision() {

## Generate the test name for running the litmusbook for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-deprovision-xfs-bkp-same-ns metadata='')
echo $test_name

## copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_dep_xfs_bkp_same_ns.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'xfs-bkp-same-ns'/g}" \
-e 's/app: percona-deployment/app: percona-deprovision-xfs-bkp-same-ns/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deprovision-xfs-bkp-same-ns-/g' \
-e "s/value: 'provision'/value: 'deprovision'/g" percona_dep_xfs_bkp_same_ns.yml

cat percona_dep_xfs_bkp_same_ns.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deprovision-xfs-bkp-same-ns' job=percona_dep_xfs_bkp_same_ns.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:xfs-backup-restore-same-ns $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deprovision_rc_val=$(echo $?)

if [ "$app_deprovision_rc_val" -eq "0" ] &&
   [ "$xfs_restore_same_ns_rc_val" -eq "0" ] &&
   [ "$xfs_backup_same_ns_rc_val" -eq "0" ] &&
   [ "$app_loadgen_rc_val" -eq "0" ] &&
   [ "$app_deploy_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:xfs-backup-restore-same-ns jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass
#python3 openebs-nativek8s/utils/result/result_update.py $job_id 3F23 3-functional "create backup of zfs volume when fstype is xfs and restore in sameerent namespace" Pass $pipeline_id "$current_time" $commit_id $gittoken

else
## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:xfs-backup-restore-same-ns jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
#python3 openebs-nativek8s/utils/result/result_update.py $job_id 3F23 3-functional "create backup of zfs volume when fstype is xfs and restore in sameerent namespace" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

}

if [ "$1" == "run_job" ];then
  app_deploy $2 $3 $4 $5 $6
  app_loadgen
  xfs_backup_same_ns
  xfs_restore_same_ns
  app_deprovision
else
  connect_cluster
fi
