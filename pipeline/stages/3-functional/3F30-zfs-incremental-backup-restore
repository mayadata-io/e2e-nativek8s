#!/bin/bash

## Define and initialize test-result specific variables.
app_deploy_rc_val=1
app_loadgen_rc_val=1
zfs_incr_backup_rc_val=1
zfs_incr_restore_rc_val=1

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/3-functional/3F30-zfs-incremental-backup-restore run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$VELERO_PLUGIN_NAME'"' '"'$VELERO_VERSION'"' '"'$ZFS_OPERATOR_NAMESPACE'"'

}

#######################################
# Deploy percona application on ZFSPV #
#######################################

app_deploy() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
velero_plugin=$(echo $4)
velero_version=$(echo $5)
zfs_operator_namespace=$(echo $6)
source ~/.profile
gittoken=$(echo "$github_token")

time="date"
current_time=$(eval $time)

## Pooling over the previous job to wait for its completion
bash pipeline/utils/pooling jobname:zfs-backup-restore-diff-ns
bash pipeline/utils/zfs-e2e-cr jobname:zfs-incr-backup-restore jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name for running the litmusbook for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-provision-zfs-incr-bkp metadata='')
echo $test_name

## copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_zfs_incr_bkp.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-incr-bkp'/g}" \
-e 's/generateName: percona-deploy-/generateName: percona-zfs-incr-bkp-restore-/g' \
-e 's/app: percona-deployment/app: percona-zfs-incr-bkp/g' percona_zfs_incr_bkp.yml

cat percona_zfs_incr_bkp.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-zfs-incr-bkp' job=percona_zfs_incr_bkp.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-incr-backup-restore $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deploy_rc_val=$(echo $?)
if [ "$app_deploy_rc_val" != "0" ]; then
exit 1;
fi

}

################
#  App_Loaden  #
################

app_loadgen() {

## Generate test name for running litmusbook for generate load on application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-loadgen-zfs-incr-bkp metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of workload run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/percona/workload/run_e2e_test.yml loadgen_zfs_incr_bkp_restore.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/loadgen: percona-loadjob/loadgen: percona-loadjob-zfs-incr-bkp/g' \
-e 's/generateName: percona-loadgen-/generateName: percona-loadgen-zfs-incr-bkp-/g' \
-e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-incr-bkp'/g}" loadgen_zfs_incr_bkp_restore.yml

cat loadgen_zfs_incr_bkp_restore.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='loadgen:percona-loadjob-zfs-incr-bkp' job=loadgen_zfs_incr_bkp_restore.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-incr-backup-restore $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_loadgen_rc_val=$(echo $?)
if [ "$app_loadgen_rc_val" != "0" ]; then
exit 1;
fi

}

#########################
#  zfspv-velero-backup  #
#########################

zfs_incr_backup() {

## Generate the test name for running the litmusbook for percona deployment
run_id="zfs-incr-bkp";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-velero-backup-restore metadata=${run_id})
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp experiments/functional/backup_and_restore/run_e2e_test.yml zfs_incr_backup.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-velero-backup-restore-/generateName: zfs-incr-backup-/g' \
-e 's/test: velero-backup-restore/test: zfs-incr-bkp/g' \
-e 's/name: zfspv-backup-store/name: configmap-zfs-incr-backup-restore/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-incr-bkp/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/g}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: ACTION/{n;s/.*/            value: incremental_backup/g}' \
-e '/name: VELERO_SCHEDULE_BACKUP_NAME/{n;s/.*/            value: zfs-incr-backup/g}' \
-e "/name: VELERO_PLUGIN_NAME/{n;s/.*/            value: ${velero_plugin}/g}" \
-e "/name: VELERO_VERSION/{n;s/.*/            value: ${velero_version}/g}" \
-e '/name: STORAGE_BUCKET/{n;s/.*/            value: minio/g}' zfs_incr_backup.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_incr_backup.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: zfs_incr_bkp
' zfs_incr_backup.yml

cat zfs_incr_backup.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfs-incr-bkp' job=zfs_incr_backup.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-incr-backup-restore $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfs_incr_backup_rc_val=$(echo $?)
if [ "$zfs_incr_backup_rc_val" != "0" ]; then
exit 1;
fi

}

############################
#   zfspv-velero-restore   #
############################

zfs_incr_restore() {

## Generate the test name for running the litmusbook for percona deployment
run_id="zfs-incr-restore";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-velero-backup-restore metadata=${run_id})
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp experiments/functional/backup_and_restore/run_e2e_test.yml zfs_incr_restore.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-velero-backup-restore-/generateName: zfs-incr-restore-/g' \
-e 's/test: velero-backup-restore/test: zfs-incr-restore/g' \
-e 's/name: zfspv-backup-store/name: configmap-zfs-incr-backup-restore/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-incr-bkp/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/g}' \
-e '/name: ACTION/{n;s/.*/            value: incremental_restore/g}' \
-e '/name: VELERO_SCHEDULE_BACKUP_NAME/{n;s/.*/            value: zfs-incr-backup/g}' \
-e "/name: VELERO_PLUGIN_NAME/{n;s/.*/            value: ${velero_plugin}/g}" \
-e "/name: VELERO_VERSION/{n;s/.*/            value: ${velero_version}/g}" \
-e '/name: STORAGE_BUCKET/{n;s/.*/            value: minio/g}' \
-e '/name: RESTORE_IN_DIFF_NAMESPACE/{n;s/.*/            value: "true"/g}' \
-e '/name: RESTORE_IN_DIFF_NODE/{n;s/.*/            value: "true"/g}' zfs_incr_restore.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_incr_restore.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: zfs_incr_bkp
' zfs_incr_restore.yml

cat zfs_incr_restore.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfs-incr-restore' job=zfs_incr_restore.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-incr-backup-restore $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfs_incr_restore_rc_val=$(echo $?)

if [ "$zfs_incr_restore_rc_val" != "0" ]; then
exit 1;
fi

}

#######################################
# Deprovision percona application     #
#######################################

app_deprovision() {

## Delete the namespace in which incremental restore was done.
kubectl delete ns first-incr-restore-ns second-incr-restore-ns

## Generate the test name for running the litmusbook for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-deprovision-zfs-incr-bkp metadata='')
echo $test_name

## copy the content of provisioner run_e2e_test.yml into a temporary file to update the test specific parameters.
cd zfs-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_dep_zfs_incr_bkp.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-incr-bkp'/g}" \
-e 's/app: percona-deployment/app: percona-deprovision-zfs-incr-bkp/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deprovision-zfs-incr-bkp-/g' \
-e "s/value: 'provision'/value: 'deprovision'/g" percona_dep_zfs_incr_bkp.yml

cat percona_dep_zfs_incr_bkp.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deprovision-zfs-incr-bkp' job=percona_dep_zfs_incr_bkp.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfs-incr-backup-restore $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deprovision_rc_val=$(echo $?)

if [ "$app_deprovision_rc_val" -eq "0" ] &&
   [ "$zfs_incr_restore_rc_val" -eq "0" ] &&
   [ "$zfs_incr_backup_rc_val" -eq "0" ] &&
   [ "$app_loadgen_rc_val" -eq "0" ] &&
   [ "$app_deploy_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:zfs-incr-backup-restore jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass
#python3 openebs-nativek8s/utils/result/result_update.py $job_id 3F30 3-functional "create incremental backups of zfs volume and restore in different node" Pass $pipeline_id "$current_time" $commit_id $gittoken

else
## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:zfs-incr-backup-restore jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
#python3 openebs-nativek8s/utils/result/result_update.py $job_id 3F30 3-functional "create incremental backups of zfs volume and restore in different node" Fail $pipeline_id "$current_time" $commit_id $gittoken
exit 1;
fi

}

if [ "$1" == "run_job" ];then
  app_deploy $2 $3 $4 $5 $6 $7
  app_loadgen
  zfs_incr_backup
  zfs_incr_restore
  app_deprovision
else
  connect_cluster
fi
