#!/bin/bash

## Define and initialize test-result specific variables.
zfspv_clone_rc_val=1
zfspv_clone_deprovision_rc_val=1
zfspv_snapshot_deprovision_rc_val=1

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/5-functional/zfspv-clone run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$ZFS_OPERATOR_NAMESPACE'"'

}

######################
# create zfspv-clone #
######################

zfspv_clone() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
zfs_operator_namespace=$(echo $4)
source ~/.profile

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/zfs-e2e-cr jobname:zfspv-clone jobphase:Waiting
bash pipeline/utils/zfs-e2e-cr jobname:zfspv-clone jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name to run litmusbook for creating zfspv-clone
test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-clone metadata="")
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-clone/run_e2e_test.yml zfs_clone_test.yml

# Modify test specific values in runner file using sed command
sed -i -e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfspv-sc/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: CLONE_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_clone_test.yml

cat zfs_clone_test.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfspv-clone' job=zfs_clone_test.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_rc_val=$(echo $?)

if [ "$zfspv_clone_rc_val" != "0" ]; then
exit 1;
fi

}

###########################
# Deprovision zfspv-clone #
###########################

zfspv_clone_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv clone
run_id="deprovision";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-clone metadata=${run_id})
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-clone/run_e2e_test.yml zfs_clone_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-clone-/generateName: zfspv-clone-deprovision-/g' \
-e '/labels:/{n;s/  test: zfspv-clone/  test: zfspv-clone-deprovision/g}' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfspv-sc/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: CLONE_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_clone_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_clone_deprovision.yml

cat zfs_clone_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfspv-clone-deprovision' job=zfs_clone_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_deprovision_rc_val=$(echo $?)
if [ "$zfspv_clone_deprovision_rc_val" != "0" ]; then
exit 1;
fi

}

##############################
# Deprovision zfspv-snapshot #
##############################

zfspv_snapshot_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv-snapshot
run_id="deprovision";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-snapshot metadata=${run_id})
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of provisioner run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-snapshot/run_e2e_test.yml zfs_snap_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-snapshot-/generateName: zfspv-snapshot-deprovision-/g' \
-e '/labels:/{n;s/  test: zfspv-snapshot/  test: zfspv-snapshot-deprovision/g}' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: zfs-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: SNAPSHOT_CLASS/{n;s/.*/            value: zfs-snapshot-class/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: zfs-snapshot/}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' zfs_snap_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' zfs_snap_deprovision.yml

cat zfs_snap_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:zfspv-snapshot-deprovision' job=zfs_snap_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_snapshot_deprovision_rc_val=$(echo $?)
if [ "$zfspv_snapshot_deprovision_rc_val" != "0" ]; then
exit 1;
fi

}

##########################
# Deprovision Application#
##########################

app_deprovision() {
  
## Generate test name to run litmusbook for deprovisioning the percona application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-deprovision-zfs-snap metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/percona/deployers/run_e2e_test.yml percona_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'zfs-snap'/g}" \
-e 's/app: percona-deployment/app: percona-deprovision-zfs-snap/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deprovision-zfs-snap-/g' \
-e "s/value: 'provision'/value: 'deprovision'/g" percona_deprovision.yml

cat percona_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deprovision-zfs-snap' job=percona_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:zfspv-clone $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

app_deprovision_rc_val=$(echo $?)

if [ "$app_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_snapshot_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:zfspv-clone jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

else
## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:zfspv-clone jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
exit 1;
fi

}

if [ "$1" == "run_job" ];then
  zfspv_clone $2 $3 $4 $5
  zfspv_clone_deprovision
  zfspv_snapshot_deprovision
  app_deprovision
else
  connect_cluster
fi