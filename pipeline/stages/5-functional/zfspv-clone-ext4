#!/bin/bash

## Define and initialize test-result specific variables.
zfspv_clone_ext4_rc_val=1
zfspv_clone_ext4_deprovision_rc_val=1
zfspv_snapshot_ext4_deprovision_rc_val=1

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa
sshpass -p $pass ssh -o StrictHostKeyChecking=no $zfs_user@$zfs_ip -p $zfs_port -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/5-functional/zfspv-clone-ext4 run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$ZFS_OPERATOR_NAMESPACE'"'

}

###########################
# create zfspv-clone-ext4 #
###########################

zfspv_clone_ext4() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
zfs_operator_namespace=$(echo $4)
ource ~/.profile

time="date"
current_time=$(eval $time)

## Create the e2e-result-custom-resources for the jobs
bash pipeline/utils/zfs-e2e-cr jobname:clone-ext4 jobphase:Waiting
bash pipeline/utils/zfs-e2e-cr jobname:clone-ext4 jobphase:Running init_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

## Generate the test name to run litmusbook for creating zfspv-clone
run_id="ext4";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-clone metadata=${run_id})
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-clone/run_e2e_test.yml clone_ext4.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-clone-/generateName: clone-zfspv-ext4/g' \
-e 's/name: zfspv-snapshot-clone/name: snap-clone-ext4/g' \
-e 's/test: zfspv-clone/test: clone-zfspv-ext4/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: ext4-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfspv-sc-ext4/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: ext4-snapshot/}' \
-e '/name: CLONE_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' clone_ext4.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' clone_ext4.yml

cat clone_ext4.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:clone-zfspv-ext4' job=clone_ext4.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:clone-ext4 $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_ext4_rc_val=$(echo $?)
if [ "$zfspv_clone_ext4_rc_val" != "0" ]; then
exit 1;
fi

}

################################
# Deprovision zfspv-clone-ext4 #
################################

zfspv_clone_ext4_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv clone
run_id="ext4-deprovision";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-clone metadata=${run_id})
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-clone/run_e2e_test.yml clone_ext4_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-clone-/generateName: clone-ext4-deprovision-/g' \
-e '/labels:/{n;s/  test: zfspv-clone/  test: clone-ext4-deprovision/g}' \
-e 's/name: zfspv-snapshot-clone/name: snap-clone-ext4/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: ext4-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: STORAGE_CLASS/{n;s/.*/            value: zfspv-sc-ext4/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: ext4-snapshot/}' \
-e '/name: CLONE_PVC_NAME/{n;s/.*/            value: clone-pvc/}' \
-e '/name: APP_NAME/{n;s/.*/            value: percona/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' clone_ext4_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' clone_ext4_deprovision.yml

cat clone_ext4_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:clone-ext4-deprovision' job=clone_ext4_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:clone-ext4 $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_clone_ext4_deprovision_rc_val=$(echo $?)
if [ "$zfspv_clone_ext4_deprovision_rc_val" != "0" ]; then
exit 1;
fi

}

###################################
# Deprovision zfspv-snapshot-ext4 #
###################################

zfspv_snapshot_ext4_deprovision() {

## Generate test name to run litmusbook for deprovisioning the zfspv-snapshot
run_id="ext4-deprovision";test_name=$(bash pipeline/utils/generate_test_name testcase=zfspv-snapshot metadata=${run_id})
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of provisioner run_e2e_test.yml into a different file to update the test specific parameters.
cp experiments/functional/zfspv-snapshot/run_e2e_test.yml snap_ext4_deprovision.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/generateName: zfspv-snapshot-/generateName: snap-ext4-deprovision-/g' \
-e '/labels:/{n;s/  test: zfspv-snapshot/  test: snap-ext4-deprovision/g}' \
-e 's/name: zfspv-snapshot-clone/name: snap-clone-ext4/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: ext4-snap/}' \
-e "/name: ZFS_OPERATOR_NAMESPACE/{n;s/.*/            value: ${zfs_operator_namespace}/}" \
-e '/name: SNAPSHOT_CLASS/{n;s/.*/            value: ext4-snapshot-class/}' \
-e '/name: SNAPSHOT_NAME/{n;s/.*/            value: ext4-snapshot/}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/}' \
-e '/name: ACTION/{n;s/.*/            value: deprovision/}' \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/}' snap_ext4_deprovision.yml

sed -i '/command:/i \
          - name: RUN_ID\
            value: '"$run_id"'\
' snap_ext4_deprovision.yml

cat snap_ext4_deprovision.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:snap-ext4-deprovision' job=snap_ext4_deprovision.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:clone-ext4 $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"

zfspv_snapshot_ext4_deprovision_rc_val=$(echo $?)
if [ "$zfspv_snapshot_ext4_deprovision_rc_val" != "0" ]; then
exit 1;
fi

}

###########################
# Deprovision Application #
###########################

app_deprovision_ext4() {
  
## Generate test name to run litmusbook for deprovisioning the percona application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-deprovision-ext4-snap metadata='')
echo $test_name
cd zfs-localpv/e2e-tests

# copy the content of run_e2e_test.yml into a different file to update the test specific parameters.
cp apps/percona/deployers/run_e2e_test.yml percona_ext4_snap_clone_dep.yml

# Modify test specific values in runner file using sed command
sed -i -e "/name: APP_NAMESPACE/{n;s/value: 'percona'/value: 'ext4-snap'/g}" \
-e 's/app: percona-deployment/app: percona-deprovision-ext4-snap/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deprovision-ext4-snap-/g' \
-e "s/value: 'provision'/value: 'deprovision'/g" percona_ext4_snap_clone_dep.yml

cat percona_ext4_snap_clone_dep.yml

## Run the Litmus job and get the details of the litmus job from litmus_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deprovision-ext4-snap' job=percona_ext4_snap_clone_dep.yml
## Get the cluster state Once the litmus jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:clone-ext4 $test_name jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id"
app_deprovision_ext4_rc_val=$(echo $?)

if [ "$app_deprovision_ext4_rc_val" -eq "0" ] &&
   [ "$zfspv_snapshot_ext4_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_ext4_deprovision_rc_val" -eq "0" ] &&
   [ "$zfspv_clone_ext4_rc_val" -eq "0" ]; then

## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:clone-ext4 jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

else
## Update the e2e-result-custom-resources for the job
bash pipeline/utils/zfs-e2e-cr jobname:clone-ext4 jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
exit 1;
fi

}

if [ "$1" == "run_job" ];then
  zfspv_clone_ext4 $2 $3 $4 $5
  zfspv_clone_ext4_deprovision
  zfspv_snapshot_ext4_deprovision
  app_deprovision_ext4
else
  connect_cluster
fi