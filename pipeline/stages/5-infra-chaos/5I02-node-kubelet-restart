#!/bin/bash

## SSH into the cluster to run the kubernetes jobs for the experiments
connect_cluster() {
mkdir -p /root/.ssh
touch /root/.ssh/id_rsa
echo "$SSH_KEYS" > /root/.ssh/id_rsa
chmod 600 /root/.ssh/id_rsa

node_name=$(ssh -o StrictHostKeyChecking=no $lvm_user@$ip  -i /root/.ssh/id_rsa -o LogLevel=ERROR kubectl get nodes --no-headers | grep -v master | awk 'FNR==1 {print $1}')

ssh -o StrictHostKeyChecking=no $lvm_user@$ip  -i /root/.ssh/id_rsa -o LogLevel=ERROR 'cd e2e-nativek8s && bash pipeline/stages/5-infra-chaos/5I02-node-kubelet-restart run_job '"'$CI_JOB_ID'"'' '"'$CI_PIPELINE_ID'"' '"'$CI_COMMIT_SHA'"' '"'$node_name'"' '"'$LVM_NODE_PASSWORD'"'

}

#######################################
# Deploy percona application on LVMPV #
#######################################

app_deploy() {

job_id=$(echo $1)
pipeline_id=$(echo $2)
commit_id=$(echo $3)
observer_node=$(echo $4)
lvm_node_pwd=$(echo $5)

time="date"
current_time=$(eval $time)

## Pooling over the previous job to wait for its completion
bash pipeline/utils/pooling jobname:node-docker-restart
bash pipeline/utils/lvm-e2e-cr jobname:node-kubelet-restart jobphase:Running init_time:"$current_time" jobid:"$job_id"

## Generate the test name for running the e2e-test for percona deployment
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-provision-kubelet-restart metadata="")
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd lvm-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_kubelet_restart.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/app: percona-deployment/app: percona-deployment-kubelet-restart/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deploy-kubelet-restart-/g' \
-e "s/value: 'openebs-lvmsc'/value: 'openebs-lvmsc-wfc'/g" \
-e "s/value: 'percona'/value: 'kubelet-restart'/g" percona_kubelet_restart.yml

cat percona_kubelet_restart.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deployment-kubelet-restart' job=percona_kubelet_restart.yml
## Get the cluster state once the e2e-test job completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:node-kubelet-restart $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

app_deploy_rc_val=$(echo $?)
if [ "$app_deploy_rc_val" != "0" ]; then
exit 1;
fi

}

######################
#    App loadgen     #
######################

app_loadgen() {

## Generate test name for running test for generate load on application
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-loadgen-kubelet-restart metadata='')
echo $test_name

## copy the content of workload run_e2e_test.yml into a temporary file to update the test specific parameters.
cd lvm-localpv/e2e-tests
cp apps/percona/workload/run_e2e_test.yml loadgen_kubelet_restart.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/loadgen: percona-loadjob/loadgen: percona-loadjob-kubelet-restart/g' \
-e 's/generateName: percona-loadgen-/generateName: percona-loadgen-node-kubelet-restart-/g' \
-e "s/value: 'percona'/value: 'kubelet-restart'/g" loadgen_kubelet_restart.yml

cat loadgen_kubelet_restart.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='loadgen:percona-loadjob-kubelet-restart' job=loadgen_kubelet_restart.yml
## Get the cluster state Once the e2e-test jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:node-kubelet-restart $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

app_loadgen_rc_val=$(echo $?)
if [ "$app_loadgen_rc_val" != "0" ]; then
exit 1;
fi

}

##############################
#    node kubelet restart     #
#############################

node_kubelet_restart() {

## Generate test name for running test for node_kubelet_restart infra-chaos test
test_name=$(bash pipeline/utils/generate_test_name testcase=kubelet-service-failure metadata='')
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd lvm-localpv/e2e-tests
cp experiments/infra-chaos/service_failure/run_e2e_test.yml node_kubelet_restart.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/test: service-failure-chaos/test: kubelet-service-failure-chaos/g' \
-e 's/generateName: service-failure-chaos-/generateName: kubelet-service-failure-chaos-/g' \
-e '/name: APP_NAMESPACE/{n;s/.*/            value: kubelet-restart/g}' \
-e '/name: APP_LABEL/{n;s/.*/            value: app=percona/g}' \
-e '/name: APP_PVC/{n;s/.*/            value: percona-pvc/g}' \
-e '/name: SVC_TYPE/{n;s/.*/            value: kubelet/g}' \
-e '/name: USERNAME/{n;s/.*/            value: k8s/g}' \
-e "s/nodePassword:/nodePassword: ${lvm_node_pwd}/g" \
-e '/name: DATA_PERSISTENCE/{n;s/.*/            value: mysql/g}' node_kubelet_restart.yml

sed -i -e "s|#nodeSelector|nodeSelector|g" \
-e "s|#  kubernetes.io/hostname:|  kubernetes.io/hostname: ${observer_node}|g" node_kubelet_restart.yml

sed -i '/parameters.yml: |/a \
    dbuser: root\
    dbpassword: k8sDem0\
    dbname: service_failure
' node_kubelet_restart.yml

cat node_kubelet_restart.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='test:kubelet-service-failure-chaos' job=node_kubelet_restart.yml
## Get the cluster state Once the e2e-test jobs completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:node-kubelet-restart $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

node_kubelet_restart_rc_val=$(echo $?)
if [ "$node_kubelet_restart_rc_val" != "0" ]; then
exit 1;
fi

}

##########################
#    App deprovision     #
#########################

app_deprovision() {

## Generate the test name for running the e2e-test for percona deprovision
test_name=$(bash pipeline/utils/generate_test_name testcase=percona-deprovision-kubelet-restart metadata="")
echo $test_name

## copy the content of run_e2e_test.yml into a temporary file to update the test specific parameters.
cd lvm-localpv/e2e-tests
cp apps/percona/deployers/run_e2e_test.yml percona_dep_kubelet_restart.yml

# Modify test specific values in runner file using sed command
sed -i -e 's/app: percona-deployment/app: percona-deprovision-kubelet-restart/g' \
-e 's/generateName: percona-deploy-/generateName: percona-deprovision-kubelet-restart-/g' \
-e "s/value: 'provision'/value: 'deprovision'/g" \
-e "s/value: 'percona'/value: 'kubelet-restart'/g" percona_dep_kubelet_restart.yml

cat percona_dep_kubelet_restart.yml

## Run the e2e-test job and get the details of the job from e2e_job_runner utils.
bash ../../pipeline/utils/e2e_job_runner label='app:percona-deprovision-kubelet-restart' job=percona_dep_kubelet_restart.yml
## Get the cluster state once the e2e-test job completed.
bash ../../pipeline/utils/dump_cluster_state;
cd ../..
## Update the e2e event for the job.
bash pipeline/utils/event_updater jobname:node-kubelet-restart $test_name jobid:"$job_id" pipelineid:"$pipeline_id"

app_deprovision_rc_val=$(echo $?)

if [ "$app_deprovision_rc_val" != "0" ]; then

bash pipeline/utils/lvm-e2e-cr jobname:node-kubelet-restart jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Fail
exit 1;

fi

bash pipeline/utils/lvm-e2e-cr jobname:node-kubelet-restart jobphase:Completed end_time:"$current_time" jobid:"$job_id" pipelineid:"$pipeline_id" testcaseid:"$case_id" test_result:Pass

}

if [ "$1" == "run_job" ];then
  app_deploy $2 $3 $4 $5 $6
  app_loadgen
  node_kubelet_restart
  app_deprovision
else
  connect_cluster
fi