#!/bin/bash
set -x
job_retry_count=0
pod_retry_count=0
container_retry_count=0
job_state_retry_count=0
e2e_job_label_key=$(echo $1 | cut -d "=" -f 2 | cut -d ":" -f 1)
e2e_job_label_value=$(echo $1 | cut -d "=" -f 2 | cut -d ":" -f 2)
e2e_job_file=$(echo $2 | cut -d "=" -f 2)

echo "Running the lvm e2e test.."

jobNameCmd="kubectl get jobs -n e2e --no-headers -o jsonpath='{.items[?(@.metadata.labels.${e2e_job_label_key}==\"${e2e_job_label_value}\")].metadata.name}'"

job_deploy_out=$(kubectl create -f ${e2e_job_file}) && \
job_name=$(eval ${jobNameCmd}); retcode=$?

while [ -z "$job_name" ]; do
  sleep 15
  job_retry_count=$((job_retry_count+1))
    if [[ "$job_retry_count" -eq "10" ]]; then
      echo "unable to get JOB_NAME"; exit 1;
    fi
  job_name=$(eval ${jobNameCmd});
done
chmod 755 ../pipeline/utils/error_handler
bash ../pipeline/utils/error_handler ${retcode} msg="Unable to run e2e-test, exiting" action="exit"
    
## Obtain the e2e-test pod name 

e2ePodCmd="kubectl get pod --no-headers -n e2e -o jsonpath='{.items[?(@.metadata.labels.job-name==\"${job_name}\")].metadata.name}'"
e2e_pod=$(eval ${e2ePodCmd}); retcode=$?
while [ -z "$e2e_pod" ]; do
  sleep 15
  pod_retry_count=$((pod_retry_count+1))
    if [[ "$pod_retry_count" -eq "15" ]]; then
      echo "unable to get POD_NAME"; exit 1;
    fi
  pod_name=$(eval ${e2ePodCmd});
done

bash ../pipeline/utils/error_handler ${retcode} msg="Unable to find e2e test runner pod, exiting" action="exit"

## Wait till the ansibletest container terminates && also confirm job completion status. This is done to ensure
## that execution of auxiliary containers such as loggers is completed. Getting the ansibletest ccontainer to completed state 
## satisfies the "necessary" condition for test job completion

containerStateCmd="kubectl get pod ${e2e_pod} -n e2e -o jsonpath='{.status.containerStatuses[?(@.name==\"ansibletest\")].state}'"
jobStateCmd="kubectl get pod ${e2e_pod} --no-headers -n e2e -o custom-columns=:status.phase"

## TODO: Consider cases where e2e-test pod is evicted

while true; do
  cstate=$(eval ${containerStateCmd}); rc=$?
  if [[ $rc -eq 0 && ! $cstate ]]; then
    sleep 15
    container_retry_count=$((container_retry_count+1))
    if [[ "$container_retry_count" -eq "10" ]]; then
      echo "unable to get CONTAINER-STATUS"; exit 1;
    fi
    else if [[ $rc -eq 0 && ! -z $cstate ]]; then
      if [[ ! $cstate =~ 'terminated' ]]; then
        sleep 10
      else break;
      fi
    else
      echo "unable to get e2e-test container status"; exit 1
    fi
  fi
done

while true; do
  jstate=$(eval ${jobStateCmd}); rc=$?
  if [[ $rc -eq 0 && ! -z $jstate ]]; then
    if [[ $jstate =~ 'Running' ]]; then
      sleep 10
    else break;
    fi
  else
    sleep 10
    job_state_retry_count=$((job_state_retry_count+1))
    if [[ "$job_state_retry_count" -eq "10" ]]; then
      echo "unable to get e2e-test job status"; exit 1;
    fi  
  fi
done
echo "e2e-test run Job has completed"

echo "Dumping e2e-test pod logs for debug"; echo ""
kubectl logs $e2e_pod -n e2e -c ansibletest